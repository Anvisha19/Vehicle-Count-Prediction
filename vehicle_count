import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error
import joblib

# Step 1: Load the dataset from the specified path
file_path = r"C:\Users\admin\Desktop\traffic.csv"  # Adjust the file path if necessary
data = pd.read_csv(file_path)

# Step 2: Inspect the dataset to check column names
print("Column Names:", data.columns)  # Print column names to verify the timestamp column exists
print("First few rows of data:\n", data.head())  # Display first few rows to understand structure

# Step 3: Preprocess the data
# Check if the 'timestamp' or 'datetime' column exists and convert it to datetime
if 'timestamp' in data.columns:
    data['timestamp'] = pd.to_datetime(data['timestamp'])
elif 'datetime' in data.columns:
    data['datetime'] = pd.to_datetime(data['datetime'])  # Adjust if necessary
else:
    print("Error: No timestamp or datetime column found. Please check your data.")

# Handle missing values (forward fill)
data.fillna(method='ffill', inplace=True)

# Step 4: Feature engineering
# Assuming you are using 'timestamp' or 'datetime' column
data['hour'] = data['timestamp'].dt.hour if 'timestamp' in data.columns else data['datetime'].dt.hour
data['day_of_week'] = data['timestamp'].dt.dayofweek if 'timestamp' in data.columns else data['datetime'].dt.dayofweek

# Step 5: Check if 'vehicle_count' column exists
if 'vehicle_count' not in data.columns:
    print("Error: 'vehicle_count' column not found. Please check your data.")
else:
    # Step 6: Split data into features (X) and target (y)
    X = data[['hour', 'day_of_week']]  # Features
    y = data['vehicle_count']          # Target variable

    # Step 7: Split data into train and test sets
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Step 8: Initialize and train the model
    model = LinearRegression()
    model.fit(X_train, y_train)

    # Step 9: Evaluate the model
    y_pred = model.predict(X_test)
    mae = mean_absolute_error(y_test, y_pred)
    rmse = np.sqrt(mean_squared_error(y_test, y_pred))

    print(f'Mean Absolute Error: {mae}')
    print(f'Root Mean Squared Error: {rmse}')

    # Step 10: Visualize Actual vs Predicted
    plt.scatter(y_test, y_pred)
    plt.xlabel('Actual Vehicle Count')
    plt.ylabel('Predicted Vehicle Count')
    plt.title('Actual vs Predicted Vehicle Count')
    plt.show()

    # Step 11: Save the model
    joblib.dump(model, r'C:\Users\admin\Documents\vehicle_count_model.pkl')  # Save model to file

    # Step 12: Load the saved model and make predictions on new data
    # Example: predict vehicle count for a given hour and day of the week
    new_data = pd.DataFrame({'hour': [8], 'day_of_week': [2]})  # Example input (8 AM on a Wednesday)
    loaded_model = joblib.load(r'C:\Users\admin\Documents\vehicle_count_model.pkl')
    predicted_count = loaded_model.predict(new_data)

    print(f'Predicted Vehicle Count: {predicted_count[0]}')

